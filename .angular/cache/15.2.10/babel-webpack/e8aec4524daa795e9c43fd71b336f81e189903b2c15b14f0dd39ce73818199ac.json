{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { BehaviorSubject, combineLatestWith, Subject, takeUntil } from 'rxjs';\nimport { GET_ALL_USERS_QUERY_PORT } from '../../../../application/ports/primary/query/get-all-users.query-port';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { map } from 'rxjs/operators';\nlet UsersListComponent = class UsersListComponent {\n  constructor(_getAllUsersQueryPort) {\n    this._getAllUsersQueryPort = _getAllUsersQueryPort;\n    this.searchForm = new FormGroup({\n      search: new FormControl()\n    });\n    this._onDestroy$ = new Subject();\n    this._searchSubject = new BehaviorSubject('');\n    this.search$ = this._searchSubject.asObservable();\n    this.users$ = this._getAllUsersQueryPort.getAllUsers().pipe(combineLatestWith(this.search$), map(([users, search]) => search ? users.filter(user => user.username.toLowerCase().includes(search.toLowerCase()) || user.name.toLowerCase().includes(search.toLowerCase())) : users));\n  }\n  ngOnInit() {\n    this.searchForm.get('search')?.valueChanges.pipe(map(search => this._searchSubject.next(search)), takeUntil(this._onDestroy$)).subscribe();\n  }\n  ngOnDestroy() {\n    this._onDestroy$.next();\n    this._onDestroy$.complete();\n  }\n};\nUsersListComponent = __decorate([Component({\n  selector: 'lib-users-list',\n  styleUrls: ['./users-list.component.scss'],\n  templateUrl: './users-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [CommonModule, RouterModule, ReactiveFormsModule]\n}), __param(0, Inject(GET_ALL_USERS_QUERY_PORT))], UsersListComponent);\nexport { UsersListComponent };","map":{"version":3,"mappings":";AAAA,SACEA,uBAAuB,EACvBC,SAAS,EACTC,MAAM,QAGD,eAAe;AACtB,SACEC,eAAe,EACfC,iBAAiB,EAEjBC,OAAO,EACPC,SAAS,QACJ,MAAM;AAEb,SACEC,wBAAwB,QAEnB,sEAAsE;AAC7E,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,WAAW,EAAEC,SAAS,EAAEC,mBAAmB,QAAQ,gBAAgB;AAC5E,SAASC,GAAG,QAAQ,gBAAgB;AAU7B,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAyB7BC,YAEUC,qBAA2C;IAA3C,0BAAqB,GAArBA,qBAAqB;IA1BtB,eAAU,GAAc,IAAIL,SAAS,CAAC;MAAEM,MAAM,EAAE,IAAIP,WAAW;IAAE,CAAE,CAAC;IAE5D,gBAAW,GAAG,IAAIL,OAAO,EAAQ;IAC1C,mBAAc,GAA4B,IAAIF,eAAe,CACnE,EAAE,CACH;IAEM,YAAO,GAAuB,IAAI,CAACe,cAAc,CAACC,YAAY,EAAE;IAE9D,WAAM,GAA4B,IAAI,CAACH,qBAAqB,CAClEI,WAAW,EAAE,CACbC,IAAI,CACHjB,iBAAiB,CAAC,IAAI,CAACkB,OAAO,CAAC,EAC/BT,GAAG,CAAC,CAAC,CAACU,KAAK,EAAEN,MAAM,CAAwB,KACzCA,MAAM,GACFM,KAAK,CAACC,MAAM,CACTC,IAAe,IACdA,IAAI,CAACC,QAAQ,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACX,MAAM,CAACU,WAAW,EAAE,CAAC,IAC1DF,IAAI,CAACI,IAAI,CAACF,WAAW,EAAE,CAACC,QAAQ,CAACX,MAAM,CAACU,WAAW,EAAE,CAAC,CACzD,GACDJ,KAAK,CACV,CACF;EAKA;EAEHO,QAAQ;IACN,IAAI,CAACC,UAAU,CACZC,GAAG,CAAC,QAAQ,CAAC,EACZC,YAAY,CAACZ,IAAI,CACjBR,GAAG,CAAEI,MAAM,IAAK,IAAI,CAACC,cAAc,CAACgB,IAAI,CAACjB,MAAM,CAAC,CAAC,EACjDX,SAAS,CAAC,IAAI,CAAC6B,WAAW,CAAC,CAC5B,CACAC,SAAS,EAAE;EAChB;EAEAC,WAAW;IACT,IAAI,CAACF,WAAW,CAACD,IAAI,EAAE;IACvB,IAAI,CAACC,WAAW,CAACG,QAAQ,EAAE;EAC7B;CACD;AA5CYxB,kBAAkB,eAR9Bb,SAAS,CAAC;EACTsC,QAAQ,EAAE,gBAAgB;EAC1BC,SAAS,EAAE,CAAC,6BAA6B,CAAC;EAC1CC,WAAW,EAAE,6BAA6B;EAC1CC,eAAe,EAAE1C,uBAAuB,CAAC2C,MAAM;EAC/CC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAACrC,YAAY,EAAEC,YAAY,EAAEG,mBAAmB;CAC1D,CAAC,EA2BGkC,iBAAM,CAACvC,wBAAwB,CAAC,IA1BxBO,kBAAkB,CA4C9B;SA5CYA,kBAAkB","names":["ChangeDetectionStrategy","Component","Inject","BehaviorSubject","combineLatestWith","Subject","takeUntil","GET_ALL_USERS_QUERY_PORT","CommonModule","RouterModule","FormControl","FormGroup","ReactiveFormsModule","map","UsersListComponent","constructor","_getAllUsersQueryPort","search","_searchSubject","asObservable","getAllUsers","pipe","search$","users","filter","user","username","toLowerCase","includes","name","ngOnInit","searchForm","get","valueChanges","next","_onDestroy$","subscribe","ngOnDestroy","complete","selector","styleUrls","templateUrl","changeDetection","OnPush","standalone","imports","__param"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\adapters\\primary\\components\\users-list\\users-list.component.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  BehaviorSubject,\n  combineLatestWith,\n  Observable,\n  Subject,\n  takeUntil,\n} from 'rxjs';\nimport { UserQuery } from '../../../../application/ports/primary/query/user.query';\nimport {\n  GET_ALL_USERS_QUERY_PORT,\n  GetAllUsersQueryPort,\n} from '../../../../application/ports/primary/query/get-all-users.query-port';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'lib-users-list',\n  styleUrls: ['./users-list.component.scss'],\n  templateUrl: './users-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [CommonModule, RouterModule, ReactiveFormsModule],\n})\nexport class UsersListComponent implements OnInit, OnDestroy {\n  readonly searchForm: FormGroup = new FormGroup({ search: new FormControl() });\n\n  private readonly _onDestroy$ = new Subject<void>();\n  private _searchSubject: BehaviorSubject<string> = new BehaviorSubject<string>(\n    ''\n  );\n\n  public search$: Observable<string> = this._searchSubject.asObservable();\n\n  readonly users$: Observable<UserQuery[]> = this._getAllUsersQueryPort\n    .getAllUsers()\n    .pipe(\n      combineLatestWith(this.search$),\n      map(([users, search]: [UserQuery[], string]) =>\n        search\n          ? users.filter(\n              (user: UserQuery) =>\n                user.username.toLowerCase().includes(search.toLowerCase()) ||\n                user.name.toLowerCase().includes(search.toLowerCase())\n            )\n          : users\n      )\n    );\n\n  constructor(\n    @Inject(GET_ALL_USERS_QUERY_PORT)\n    private _getAllUsersQueryPort: GetAllUsersQueryPort\n  ) {}\n\n  ngOnInit() {\n    this.searchForm\n      .get('search')\n      ?.valueChanges.pipe(\n        map((search) => this._searchSubject.next(search)),\n        takeUntil(this._onDestroy$)\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy(): void {\n    this._onDestroy$.next();\n    this._onDestroy$.complete();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}