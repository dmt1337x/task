{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class UserStorage {\n  constructor() {\n    this.userSubject = new BehaviorSubject({\n      id: null,\n      address: null,\n      website: null,\n      phone: null,\n      email: null,\n      name: null,\n      username: null,\n      company: null\n    });\n    this.select$ = this.userSubject.asObservable();\n  }\n  patch(state) {\n    return this.userSubject.pipe(take(1), map(context => this.userSubject.next({\n      ...context,\n      ...state\n    })));\n  }\n  static #_ = this.ɵfac = function UserStorage_Factory(t) {\n    return new (t || UserStorage)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserStorage,\n    factory: UserStorage.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAAQA,eAAe,QAAkC,MAAM;AAC/D,SAASC,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;AAM1C,OAAM,MAAOC,WAAW;EADxBC;IAIU,gBAAW,GAA6B,IAAIJ,eAAe,CAAU;MAACK,EAAE,EAAC,IAAI;MAACC,OAAO,EAAC,IAAI;MAACC,OAAO,EAAC,IAAI;MAACC,KAAK,EAAC,IAAI;MAACC,KAAK,EAAC,IAAI;MAACC,IAAI,EAAC,IAAI;MAACC,QAAQ,EAAC,IAAI;MAACC,OAAO,EAAC;IAAI,CAAC,CAAC;IAEnK,YAAO,GAAwB,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;;EAEvEC,KAAK,CAACC,KAAuB;IAC3B,OAAO,IAAI,CAACH,WAAW,CAACI,IAAI,CAC1Bf,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAAEiB,OAAgB,IAAK,IAAI,CAACL,WAAW,CAACM,IAAI,CAAC;MAAE,GAAGD,OAAO;MAAE,GAAGF;IAAK,CAAE,CAAC,CAAC,CAC3E;EACH;EAAC;qBAZUb,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAiB,SAAXjB,WAAW;EAAA","names":["BehaviorSubject","map","take","UserStorage","constructor","id","address","website","phone","email","name","username","company","userSubject","asObservable","patch","state","pipe","context","next","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\adapters\\secondary\\storages\\user.storage.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {BehaviorSubject, Observable, ReplaySubject} from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { PatchUserContextPort } from '../../../application/ports/secondary/context/patch-user.context-port';\nimport { SelectUserContextPort } from '../../../application/ports/secondary/context/select-user.context-port';\nimport { UserDTO } from '../../../application/ports/secondary/dto/user.dto';\n\n@Injectable()\nexport class UserStorage\n  implements PatchUserContextPort, SelectUserContextPort\n{\n  private userSubject: BehaviorSubject<UserDTO> = new BehaviorSubject<UserDTO>({id:null,address:null,website:null,phone:null,email:null,name:null,username:null,company:null});\n\n  readonly select$: Observable<UserDTO> = this.userSubject.asObservable();\n\n  patch(state: Partial<UserDTO>): Observable<void> {\n    return this.userSubject.pipe(\n      take(1),\n      map((context: UserDTO) => this.userSubject.next({ ...context, ...state }))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}