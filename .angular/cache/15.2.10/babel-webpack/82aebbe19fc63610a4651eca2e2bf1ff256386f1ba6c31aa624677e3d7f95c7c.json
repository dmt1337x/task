{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class UserStorage {\n  constructor() {\n    this.userSubject = new ReplaySubject(1);\n    this.select$ = this.userSubject.asObservable();\n  }\n  patch(state) {\n    return this.userSubject.pipe(take(1), map(context => this.userSubject.next({\n      ...context,\n      ...state\n    })));\n  }\n  patch$(state) {}\n  static #_ = this.ɵfac = function UserStorage_Factory(t) {\n    return new (t || UserStorage)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserStorage,\n    factory: UserStorage.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,aAAa,QAAQ,MAAM;AAChD,SAASC,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;AAM1C,OAAM,MAAOC,WAAW;EADxBC;IAEU,gBAAW,GAA2B,IAAIJ,aAAa,CAAU,CAAC,CAAC;IAElE,YAAO,GAAwB,IAAI,CAACK,WAAW,CAACC,YAAY,EAAE;;EAEvEC,KAAK,CAACC,KAAuB;IAC3B,OAAO,IAAI,CAACH,WAAW,CAACI,IAAI,CAC1BP,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAAES,OAAgB,IAAK,IAAI,CAACL,WAAW,CAACM,IAAI,CAAC;MAAE,GAAGD,OAAO;MAAE,GAAGF;IAAK,CAAE,CAAC,CAAC,CAC3E;EACH;EAEAI,MAAM,CAACJ,KAAuB,GAC9B;EAAC;qBAbUL,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAU,SAAXV,WAAW;EAAA","names":["ReplaySubject","map","take","UserStorage","constructor","userSubject","asObservable","patch","state","pipe","context","next","patch$","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\adapters\\secondary\\storages\\user.storage.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { PatchUserContextPort } from '../../../application/ports/secondary/context/patch-user.context-port';\nimport { SelectUserContextPort } from '../../../application/ports/secondary/context/select-user.context-port';\nimport { UserDTO } from '../../../application/ports/secondary/dto/user.dto';\n\n@Injectable()\nexport class UserStorage implements PatchUserContextPort, SelectUserContextPort {\n  private userSubject: ReplaySubject<UserDTO> = new ReplaySubject<UserDTO>(1);\n\n  readonly select$: Observable<UserDTO> = this.userSubject.asObservable();\n\n  patch(state: Partial<UserDTO>): Observable<void> {\n    return this.userSubject.pipe(\n      take(1),\n      map((context: UserDTO) => this.userSubject.next({ ...context, ...state }))\n    );\n  }\n\n  patch$(state: Partial<UserDTO>): Observable<void> {\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}