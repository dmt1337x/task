{"ast":null,"code":"import { tap } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { GET_ALL_USERS_DTO_PORT } from '../ports/secondary/dto/get-all-users.dto-port';\nimport { GET_ONE_USER_DTO_PORT } from '../ports/secondary/dto/get-one-user.dto-port';\nimport { PATCH_USER_CONTEXT_PORT } from '../ports/secondary/context/patch-user.context-port';\nimport { SELECT_USER_CONTEXT_PORT } from '../ports/secondary/context/select-user.context-port';\nimport { GET_ALL_PHOTOS_DTO_PORT } from '../ports/secondary/dto/get-all-photos.dto-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport { PhotoQuery } from '../ports/primary/query/photo.query';\nimport { USER_ID_PROVIDER } from '../userId.token';\nimport * as i0 from \"@angular/core\";\nexport class UserAlbumsState {\n  constructor(_getAllUsersDtoPort, _getOneUserDtoPort, _patchUserContextPort, _selectUserContextPort, _getAllPhotosDtoPort, ax) {\n    this._getAllUsersDtoPort = _getAllUsersDtoPort;\n    this._getOneUserDtoPort = _getOneUserDtoPort;\n    this._patchUserContextPort = _patchUserContextPort;\n    this._selectUserContextPort = _selectUserContextPort;\n    this._getAllPhotosDtoPort = _getAllPhotosDtoPort;\n    this.ax = ax;\n  }\n  getAllUsers() {\n    return this._getAllUsersDtoPort.getAllUsers().pipe(map(allUsers => allUsers.map(user => this.mapToUserQuery(user))));\n  }\n  getUserDetails() {\n    this.ax.userId$.subscribe(x => console.log(x));\n    return this._selectUserContextPort.select$.pipe(map(user => this.mapToUserQuery(user)));\n  }\n  initDetails(id) {\n    return this._getOneUserDtoPort.getOneUser(id).pipe(switchMap(user => this._patchUserContextPort.patch(user)));\n  }\n  mapToUserQuery(user) {\n    return new UserQuery(user.id, this.getAvatar(), user.name, user.username, user.email, this.getAddress(user), user.phone, user.website, user.company.name);\n  }\n  getAddress(user) {\n    return `${user.address.street},${user.address.zipcode},${user.address.city},`;\n  }\n  getAvatar() {\n    return 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/512px-Angular_full_color_logo.svg.png';\n  }\n  getPhotosForSpecificUser(userId) {\n    return this._getAllPhotosDtoPort.getAllPhotos().pipe(tap(() => console.log(userId)), map(photos => photos.filter(photo => photo.albumId === +userId)), map(photos => photos.map(photo => new PhotoQuery(photo.albumId, photo.id, photo.title, photo.url, photo.thumbnailUrl))), tap(x => console.log(x)));\n  }\n  static #_ = this.ɵfac = function UserAlbumsState_Factory(t) {\n    return new (t || UserAlbumsState)(i0.ɵɵinject(GET_ALL_USERS_DTO_PORT), i0.ɵɵinject(GET_ONE_USER_DTO_PORT), i0.ɵɵinject(PATCH_USER_CONTEXT_PORT), i0.ɵɵinject(SELECT_USER_CONTEXT_PORT), i0.ɵɵinject(GET_ALL_PHOTOS_DTO_PORT), i0.ɵɵinject(USER_ID_PROVIDER));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserAlbumsState,\n    factory: UserAlbumsState.ɵfac\n  });\n}","map":{"version":3,"mappings":"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","names":["tap","map","switchMap","GET_ALL_USERS_DTO_PORT","GET_ONE_USER_DTO_PORT","PATCH_USER_CONTEXT_PORT","SELECT_USER_CONTEXT_PORT","GET_ALL_PHOTOS_DTO_PORT","UserQuery","PhotoQuery","USER_ID_PROVIDER","UserAlbumsState","constructor","_getAllUsersDtoPort","_getOneUserDtoPort","_patchUserContextPort","_selectUserContextPort","_getAllPhotosDtoPort","ax","getAllUsers","pipe","allUsers","user","mapToUserQuery","getUserDetails","userId$","subscribe","x","console","log","select$","initDetails","id","getOneUser","patch","getAvatar","name","username","email","getAddress","phone","website","company","address","street","zipcode","city","getPhotosForSpecificUser","userId","getAllPhotos","photos","filter","photo","albumId","title","url","thumbnailUrl","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\application\\state\\user-albums.state.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { Observable, tap } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { GetAllUsersQueryPort } from '../ports/primary/query/get-all-users.query-port';\nimport { GetUserDetailsQueryPort } from '../ports/primary/query/get-user-details.query-port';\nimport { InitDetailsCommandPort } from '../ports/primary/command/init-details.command-port';\nimport { GetPhotosForSpecificUserQueryPort } from '../ports/primary/query/get-photos-for-specific-user.query-port';\nimport {\n  GET_ALL_USERS_DTO_PORT,\n  GetAllUsersDtoPort,\n} from '../ports/secondary/dto/get-all-users.dto-port';\nimport {\n  GET_ONE_USER_DTO_PORT,\n  GetOneUserDtoPort,\n} from '../ports/secondary/dto/get-one-user.dto-port';\nimport {\n  PATCH_USER_CONTEXT_PORT,\n  PatchUserContextPort,\n} from '../ports/secondary/context/patch-user.context-port';\nimport {\n  SELECT_USER_CONTEXT_PORT,\n  SelectUserContextPort,\n} from '../ports/secondary/context/select-user.context-port';\nimport {\n  GET_ALL_PHOTOS_DTO_PORT,\n  GetAllPhotosDtoPort,\n} from '../ports/secondary/dto/get-all-photos.dto-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport { UserDTO } from '../ports/secondary/dto/user.dto';\nimport { PhotoQuery } from '../ports/primary/query/photo.query';\nimport { Params } from '@angular/router';\nimport { USER_ID_PROVIDER, UserIdProvider } from '../userId.token';\n\n@Injectable()\nexport class UserAlbumsState\n  implements\n    GetAllUsersQueryPort,\n    GetUserDetailsQueryPort,\n    InitDetailsCommandPort,\n    GetPhotosForSpecificUserQueryPort\n{\n  constructor(\n    @Inject(GET_ALL_USERS_DTO_PORT)\n    private _getAllUsersDtoPort: GetAllUsersDtoPort,\n    @Inject(GET_ONE_USER_DTO_PORT)\n    private _getOneUserDtoPort: GetOneUserDtoPort,\n    @Inject(PATCH_USER_CONTEXT_PORT)\n    private _patchUserContextPort: PatchUserContextPort,\n    @Inject(SELECT_USER_CONTEXT_PORT)\n    private _selectUserContextPort: SelectUserContextPort,\n    @Inject(GET_ALL_PHOTOS_DTO_PORT)\n    private _getAllPhotosDtoPort: GetAllPhotosDtoPort,\n    @Inject(USER_ID_PROVIDER)\n    private ax: UserIdProvider\n  ) {}\n\n  getAllUsers(): Observable<UserQuery[]> {\n    return this._getAllUsersDtoPort\n      .getAllUsers()\n      .pipe(\n        map((allUsers: UserDTO[]) =>\n          allUsers.map((user) => this.mapToUserQuery(user))\n        )\n      );\n  }\n\n  getUserDetails(): Observable<UserQuery> {\n    this.ax.userId$.subscribe((x) => console.log(x));\n    return this._selectUserContextPort.select$.pipe(\n      map((user: UserDTO) => this.mapToUserQuery(user))\n    );\n  }\n\n  initDetails(id: number): Observable<void> {\n    return this._getOneUserDtoPort\n      .getOneUser(id)\n      .pipe(\n        switchMap((user: UserDTO) => this._patchUserContextPort.patch(user))\n      );\n  }\n\n  private mapToUserQuery(user: UserDTO) {\n    return new UserQuery(\n      user.id,\n      this.getAvatar(),\n      user.name,\n      user.username,\n      user.email,\n      this.getAddress(user),\n      user.phone,\n      user.website,\n      user.company.name\n    );\n  }\n\n  private getAddress(user: UserDTO) {\n    return `${user.address.street},${user.address.zipcode},${user.address.city},`;\n  }\n\n  private getAvatar() {\n    return 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/512px-Angular_full_color_logo.svg.png';\n  }\n\n  getPhotosForSpecificUser(userId: string): Observable<PhotoQuery[]> {\n    return this._getAllPhotosDtoPort.getAllPhotos().pipe(\n      tap(() => console.log(userId)),\n      map((photos) => photos.filter((photo) => photo.albumId === +userId)),\n      map((photos) =>\n        photos.map(\n          (photo) =>\n            new PhotoQuery(\n              photo.albumId,\n              photo.id,\n              photo.title,\n              photo.url,\n              photo.thumbnailUrl\n            )\n        )\n      ),\n      tap((x) => console.log(x))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}