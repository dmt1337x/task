{"ast":null,"code":"import { take } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PhotosService {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n  }\n  getAllPhotos() {\n    return this._httpClient.get('https://jsonplaceholder.typicode.com/photos').pipe(\n    // map((items: PhotoResponseDTO[]) =>\n    //   items.filter((item) => item.albumId)\n    // ),\n    take(499), map(photosResponse => photosResponse.map(({\n      albumId: userId,\n      ...rest\n    }) => ({\n      userId,\n      ...rest\n    }))));\n  }\n  getOnePhoto(id) {\n    return this._httpClient.get(`https://jsonplaceholder.typicode.com/photos/${id}`).pipe(map(({\n      albumId: userId,\n      ...rest\n    }) => ({\n      userId,\n      ...rest\n    })));\n  }\n  static #_ = this.ɵfac = function PhotosService_Factory(t) {\n    return new (t || PhotosService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PhotosService,\n    factory: PhotosService.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAA6BA,IAAI,QAAQ,MAAM;AAM/C,SAASC,GAAG,QAAQ,gBAAgB;;;AAGpC,OAAM,MAAOC,aAAa;EACxBC,YAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;EAAe;EAE9CC,YAAY;IACV,OAAO,IAAI,CAACD,WAAW,CACpBE,GAAG,CAAqB,6CAA6C,CAAC,CACtEC,IAAI;IACH;IACA;IACA;IACAP,IAAI,CAAC,GAAG,CAAC,EACTC,GAAG,CAAEO,cAAc,IACjBA,cAAc,CAACP,GAAG,CAAC,CAAC;MAAEQ,OAAO,EAAEC,MAAM;MAAE,GAAGC;IAAI,CAAE,MAAM;MACpDD,MAAM;MACN,GAAGC;KACJ,CAAC,CAAC,CACJ,CACF;EACL;EAEAC,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACT,WAAW,CACpBE,GAAG,CACF,+CAA+CO,EAAE,EAAE,CACpD,CACAN,IAAI,CACHN,GAAG,CAAC,CAAC;MAAEQ,OAAO,EAAEC,MAAM;MAAE,GAAGC;IAAI,CAAE,MAAM;MACrCD,MAAM;MACN,GAAGC;KACJ,CAAC,CAAC,CACJ;EACL;EAAC;qBA/BUT,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAY,SAAbZ,aAAa;EAAA","names":["take","map","PhotosService","constructor","_httpClient","getAllPhotos","get","pipe","photosResponse","albumId","userId","rest","getOnePhoto","id","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\adapters\\secondary\\services\\photos\\photos.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { filter, Observable, take } from 'rxjs';\nimport { GetAllPhotosDtoPort } from '../../../../application/ports/secondary/dto/get-all-photos.dto-port';\nimport { GetOnePhotoDtoPort } from '../../../../application/ports/secondary/dto/get-one-photo.dto-port';\nimport { PhotoDTO } from '../../../../application/ports/secondary/dto/photo.dto';\nimport { HttpClient } from '@angular/common/http';\nimport { PhotoResponseDTO } from '../../../../application/ports/secondary/dto/photo.response-dto';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class PhotosService implements GetAllPhotosDtoPort, GetOnePhotoDtoPort {\n  constructor(private _httpClient: HttpClient) {}\n\n  getAllPhotos(): Observable<PhotoDTO[]> {\n    return this._httpClient\n      .get<PhotoResponseDTO[]>('https://jsonplaceholder.typicode.com/photos')\n      .pipe(\n        // map((items: PhotoResponseDTO[]) =>\n        //   items.filter((item) => item.albumId)\n        // ),\n        take(499),\n        map((photosResponse) =>\n          photosResponse.map(({ albumId: userId, ...rest }) => ({\n            userId,\n            ...rest,\n          }))\n        )\n      );\n  }\n\n  getOnePhoto(id: number): Observable<PhotoDTO> {\n    return this._httpClient\n      .get<PhotoResponseDTO>(\n        `https://jsonplaceholder.typicode.com/photos/${id}`\n      )\n      .pipe(\n        map(({ albumId: userId, ...rest }) => ({\n          userId,\n          ...rest,\n        }))\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}