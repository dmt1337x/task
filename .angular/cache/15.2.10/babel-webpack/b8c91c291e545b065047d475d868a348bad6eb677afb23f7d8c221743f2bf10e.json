{"ast":null,"code":"import { switchMap } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GET_ALL_USERS_DTO_PORT } from '../ports/secondary/dto/get-all-users.dto-port';\nimport { GET_ONE_USER_DTO_PORT } from '../ports/secondary/dto/get-one-user.dto-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport { PATCH_USER_CONTEXT_PORT } from '../ports/secondary/context/patch-user.context-port';\nimport { SELECT_USER_CONTEXT_PORT } from '../ports/secondary/context/select-user.context-port';\nimport * as i0 from \"@angular/core\";\nexport class UserAlbumsState {\n  constructor(_getAllUsersDtoPort, _getOneUserDtoPort, _patchUserContextPort, _selectUserContextPort) {\n    this._getAllUsersDtoPort = _getAllUsersDtoPort;\n    this._getOneUserDtoPort = _getOneUserDtoPort;\n    this._patchUserContextPort = _patchUserContextPort;\n    this._selectUserContextPort = _selectUserContextPort;\n  }\n  getAllUsers() {\n    return this._getAllUsersDtoPort.getAllUsers().pipe(map(allUsers => allUsers.map(user => new UserQuery(user.id, this.getAvatar(), user.name, user.username, user.email, this.getAddress(user), user.phone, user.website, user.company.name))));\n  }\n  getAddress(user) {\n    return `${user.address.street},${user.address.zipcode},${user.address.city},`;\n  }\n  getAvatar() {\n    return 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/512px-Angular_full_color_logo.svg.png';\n  }\n  loadUserDetails(id) {\n    return this._getOneUserDtoPort.getOneUser(id).pipe(switchMap(data => this._patchUserContextPort.patch(data)));\n  }\n  static #_ = this.ɵfac = function UserAlbumsState_Factory(t) {\n    return new (t || UserAlbumsState)(i0.ɵɵinject(GET_ALL_USERS_DTO_PORT), i0.ɵɵinject(GET_ONE_USER_DTO_PORT), i0.ɵɵinject(PATCH_USER_CONTEXT_PORT), i0.ɵɵinject(SELECT_USER_CONTEXT_PORT));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserAlbumsState,\n    factory: UserAlbumsState.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,SAAS,QAAQ,MAAM;AAC5C,SAASC,GAAG,QAAQ,gBAAgB;AAGpC,SACEC,sBAAsB,QAEjB,+CAA+C;AACtD,SACEC,qBAAqB,QAEhB,8CAA8C;AACrD,SAASC,SAAS,QAAQ,mCAAmC;AAE7D,SACEC,uBAAuB,QAElB,oDAAoD;AAC3D,SACEC,wBAAwB,QAEnB,qDAAqD;;AAG5D,OAAM,MAAOC,eAAe;EAG1BC,YAEUC,mBAAuC,EAEvCC,kBAAqC,EAErCC,qBAA2C,EAE3CC,sBAA6C;IAN7C,wBAAmB,GAAnBH,mBAAmB;IAEnB,uBAAkB,GAAlBC,kBAAkB;IAElB,0BAAqB,GAArBC,qBAAqB;IAErB,2BAAsB,GAAtBC,sBAAsB;EAC7B;EAEHC,WAAW;IACT,OAAO,IAAI,CAACJ,mBAAmB,CAC5BI,WAAW,EAAE,CACbC,IAAI,CACHb,GAAG,CAAEc,QAAQ,IACXA,QAAQ,CAACd,GAAG,CACTe,IAAI,IACH,IAAIZ,SAAS,CACXY,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,SAAS,EAAE,EAChBF,IAAI,CAACG,IAAI,EACTH,IAAI,CAACI,QAAQ,EACbJ,IAAI,CAACK,KAAK,EACV,IAAI,CAACC,UAAU,CAACN,IAAI,CAAC,EACrBA,IAAI,CAACO,KAAK,EACVP,IAAI,CAACQ,OAAO,EACZR,IAAI,CAACS,OAAO,CAACN,IAAI,CAClB,CACJ,CACF,CACF;EACL;EAEQG,UAAU,CAACN,IAAa;IAC9B,OAAO,GAAGA,IAAI,CAACU,OAAO,CAACC,MAAM,IAAIX,IAAI,CAACU,OAAO,CAACE,OAAO,IAAIZ,IAAI,CAACU,OAAO,CAACG,IAAI,GAAG;EAC/E;EAEQX,SAAS;IACf,OAAO,6HAA6H;EACtI;EAEAY,eAAe,CAACb,EAAU;IACxB,OAAO,IAAI,CAACP,kBAAkB,CAC3BqB,UAAU,CAACd,EAAE,CAAC,CACdH,IAAI,CAACd,SAAS,CAAEgC,IAAI,IAAK,IAAI,CAACrB,qBAAqB,CAACsB,KAAK,CAACD,IAAI,CAAC,CAAC,CAAC;EACtE;EAAC;qBAjDUzB,eAAe,cAIhBL,sBAAsB,eAEtBC,qBAAqB,eAErBE,uBAAuB,eAEvBC,wBAAwB;EAAA;EAAA;WAVvBC,eAAe;IAAA2B,SAAf3B,eAAe;EAAA","names":["switchMap","map","GET_ALL_USERS_DTO_PORT","GET_ONE_USER_DTO_PORT","UserQuery","PATCH_USER_CONTEXT_PORT","SELECT_USER_CONTEXT_PORT","UserAlbumsState","constructor","_getAllUsersDtoPort","_getOneUserDtoPort","_patchUserContextPort","_selectUserContextPort","getAllUsers","pipe","allUsers","user","id","getAvatar","name","username","email","getAddress","phone","website","company","address","street","zipcode","city","loadUserDetails","getOneUser","data","patch","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\application\\state\\user-albums.state.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { Observable, switchMap } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GetAllUsersQueryPort } from '../ports/primary/query/get-all-users.query-port';\nimport { LoadUserDetailsCommandPort } from '../ports/primary/command/load-user-details.command-port';\nimport {\n  GET_ALL_USERS_DTO_PORT,\n  GetAllUsersDtoPort,\n} from '../ports/secondary/dto/get-all-users.dto-port';\nimport {\n  GET_ONE_USER_DTO_PORT,\n  GetOneUserDtoPort,\n} from '../ports/secondary/dto/get-one-user.dto-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport { UserDTO } from '../ports/secondary/dto/user.dto';\nimport {\n  PATCH_USER_CONTEXT_PORT,\n  PatchUserContextPort,\n} from '../ports/secondary/context/patch-user.context-port';\nimport {\n  SELECT_USER_CONTEXT_PORT,\n  SelectUserContextPort,\n} from '../ports/secondary/context/select-user.context-port';\n\n@Injectable()\nexport class UserAlbumsState\n  implements GetAllUsersQueryPort, LoadUserDetailsCommandPort\n{\n  constructor(\n    @Inject(GET_ALL_USERS_DTO_PORT)\n    private _getAllUsersDtoPort: GetAllUsersDtoPort,\n    @Inject(GET_ONE_USER_DTO_PORT)\n    private _getOneUserDtoPort: GetOneUserDtoPort,\n    @Inject(PATCH_USER_CONTEXT_PORT)\n    private _patchUserContextPort: PatchUserContextPort,\n    @Inject(SELECT_USER_CONTEXT_PORT)\n    private _selectUserContextPort: SelectUserContextPort\n  ) {}\n\n  getAllUsers(): Observable<UserQuery[]> {\n    return this._getAllUsersDtoPort\n      .getAllUsers()\n      .pipe(\n        map((allUsers) =>\n          allUsers.map(\n            (user) =>\n              new UserQuery(\n                user.id,\n                this.getAvatar(),\n                user.name,\n                user.username,\n                user.email,\n                this.getAddress(user),\n                user.phone,\n                user.website,\n                user.company.name\n              )\n          )\n        )\n      );\n  }\n\n  private getAddress(user: UserDTO) {\n    return `${user.address.street},${user.address.zipcode},${user.address.city},`;\n  }\n\n  private getAvatar() {\n    return 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/512px-Angular_full_color_logo.svg.png';\n  }\n\n  loadUserDetails(id: number): Observable<void> {\n    return this._getOneUserDtoPort\n      .getOneUser(id)\n      .pipe(switchMap((data) => this._patchUserContextPort.patch(data)));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}