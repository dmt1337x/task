{"ast":null,"code":"import { BehaviorSubject, take } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class UserStorage {\n  constructor() {\n    this.userSubject = new BehaviorSubject({});\n    this.select$ = this.userSubject.asObservable();\n  }\n  patch(state) {\n    return this.userSubject.pipe(take(1), map(context => this.userSubject.next({\n      ...context,\n      ...state\n    })));\n  }\n  static #_ = this.ɵfac = function UserStorage_Factory(t) {\n    return new (t || UserStorage)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserStorage,\n    factory: UserStorage.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAcC,IAAI,QAAQ,MAAM;AACxD,SAASC,GAAG,QAAQ,gBAAgB;;AAIpC,OAAM,MAAOC,WAAW;EADxBC;IAEU,gBAAW,GAA6B,IAAIJ,eAAe,CACjE,EAAE,CACH;IAEQ,YAAO,GAAwB,IAAI,CAACK,WAAW,CAACC,YAAY,EAAE;;EAEvEC,KAAK,CAACC,KAAuB;IAC3B,OAAO,IAAI,CAACH,WAAW,CAACI,IAAI,CAC1BR,IAAI,CAAC,CAAC,CAAC,EACPC,GAAG,CAAEQ,OAAgB,IAAK,IAAI,CAACL,WAAW,CAACM,IAAI,CAAC;MAAE,GAAGD,OAAO;MAAE,GAAGF;IAAK,CAAE,CAAC,CAAC,CAC3E;EACH;EAAC;qBAZUL,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAS,SAAXT,WAAW;EAAA","names":["BehaviorSubject","take","map","UserStorage","constructor","userSubject","asObservable","patch","state","pipe","context","next","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\adapters\\secondary\\storages\\user.storage.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, take } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { UserDTO } from '../../../application/ports/secondary/dto/user.dto';\n\n@Injectable()\nexport class UserStorage {\n  private userSubject: BehaviorSubject<UserDTO> = new BehaviorSubject<UserDTO>(\n    {}\n  );\n\n  readonly select$: Observable<UserDTO> = this.userSubject.asObservable();\n\n  patch(state: Partial<UserDTO>): Observable<void> {\n    return this.userSubject.pipe(\n      take(1),\n      map((context: UserDTO) => this.userSubject.next({ ...context, ...state }))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}