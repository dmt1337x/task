{"ast":null,"code":"import { combineLatest, combineLatestWith } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { GET_ALL_USERS_DTO_PORT } from '../ports/secondary/dto/get-all-users.dto-port';\nimport { GET_ONE_USER_DTO_PORT } from '../ports/secondary/dto/get-one-user.dto-port';\nimport { PATCH_USER_CONTEXT_PORT } from '../ports/secondary/context/patch-user.context-port';\nimport { SELECT_USER_CONTEXT_PORT } from '../ports/secondary/context/select-user.context-port';\nimport { GET_ALL_PHOTOS_DTO_PORT } from '../ports/secondary/dto/get-all-photos.dto-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport { PhotoQuery } from '../ports/primary/query/photo.query';\nimport { avatarMapper } from '../mappers/avatar.mapper';\nimport * as i0 from \"@angular/core\";\nexport class UserAlbumsState {\n  constructor(_getAllUsersDtoPort, _getOneUserDtoPort, _patchUserContextPort, _selectUserContextPort, _getAllPhotosDtoPort) {\n    this._getAllUsersDtoPort = _getAllUsersDtoPort;\n    this._getOneUserDtoPort = _getOneUserDtoPort;\n    this._patchUserContextPort = _patchUserContextPort;\n    this._selectUserContextPort = _selectUserContextPort;\n    this._getAllPhotosDtoPort = _getAllPhotosDtoPort;\n  }\n  getAllUsers() {\n    return this._getAllUsersDtoPort.getAllUsers().pipe(map(allUsers => allUsers.map(user => this.mapToUserQuery(user))));\n  }\n  initDetails(id) {\n    return this._getOneUserDtoPort.getOneUser(id).pipe(switchMap(user => this._patchUserContextPort.patch(user)));\n  }\n  getUserDetails() {\n    return this._selectUserContextPort.select$.pipe(map(user => this.mapToUserQuery(user)));\n  }\n  getPhotosForSpecificUser(userId) {\n    return this._getAllPhotosDtoPort.getAllPhotos().pipe(map(photos => photos.filter(photo => photo.albumId === +userId)), combineLatestWith(this._selectUserContextPort.select$), map(([photos, userContext]) => photos.map(photo => new PhotoQuery(userContext.name, photo.title, photo.thumbnailUrl, Math.floor(Math.random() * 100)))));\n  }\n  getAllPhotos() {\n    return combineLatest([this._getAllPhotosDtoPort.getAllPhotos(), this._getAllUsersDtoPort.getAllUsers()]).pipe(map(([photos, users]) => {\n      const usersDictionary = {};\n      users.map(user => {\n        usersDictionary[user.id] = `${user.name} ${user.username}`;\n      });\n      return photos.map(photo => new PhotoQuery(usersDictionary[photo.albumId] || 'Unknown Author', photo.title, photo.thumbnailUrl, 0));\n    }));\n  }\n  mapToUserQuery(user) {\n    return new UserQuery(user.id, this.getAvatar(user.id), user.name, user.username, user.email, this.getAddress(user), user.phone, `https://www.${user.website}`, user.company.name);\n  }\n  getAddress(user) {\n    return `${user.address.street},${user.address.zipcode},${user.address.city},`;\n  }\n  getAvatar(id) {\n    return avatarMapper[id];\n  }\n  static #_ = this.ɵfac = function UserAlbumsState_Factory(t) {\n    return new (t || UserAlbumsState)(i0.ɵɵinject(GET_ALL_USERS_DTO_PORT), i0.ɵɵinject(GET_ONE_USER_DTO_PORT), i0.ɵɵinject(PATCH_USER_CONTEXT_PORT), i0.ɵɵinject(SELECT_USER_CONTEXT_PORT), i0.ɵɵinject(GET_ALL_PHOTOS_DTO_PORT));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserAlbumsState,\n    factory: UserAlbumsState.ɵfac\n  });\n}","map":{"version":3,"mappings":"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","names":["combineLatest","combineLatestWith","map","switchMap","GET_ALL_USERS_DTO_PORT","GET_ONE_USER_DTO_PORT","PATCH_USER_CONTEXT_PORT","SELECT_USER_CONTEXT_PORT","GET_ALL_PHOTOS_DTO_PORT","UserQuery","PhotoQuery","avatarMapper","UserAlbumsState","constructor","_getAllUsersDtoPort","_getOneUserDtoPort","_patchUserContextPort","_selectUserContextPort","_getAllPhotosDtoPort","getAllUsers","pipe","allUsers","user","mapToUserQuery","initDetails","id","getOneUser","patch","getUserDetails","select$","getPhotosForSpecificUser","userId","getAllPhotos","photos","filter","photo","albumId","userContext","name","title","thumbnailUrl","Math","floor","random","users","usersDictionary","username","getAvatar","email","getAddress","phone","website","company","address","street","zipcode","city","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\application\\state\\user-albums.state.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { combineLatest, combineLatestWith, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { GetAllUsersQueryPort } from '../ports/primary/query/get-all-users.query-port';\nimport { GetUserDetailsQueryPort } from '../ports/primary/query/get-user-details.query-port';\nimport { InitDetailsCommandPort } from '../ports/primary/command/init-details.command-port';\nimport { GetPhotosForSpecificUserQueryPort } from '../ports/primary/query/get-photos-for-specific-user.query-port';\nimport { GetAllPhotosQueryPort } from '../ports/primary/query/get-all-photos.query-port';\nimport {\n  GET_ALL_USERS_DTO_PORT,\n  GetAllUsersDtoPort,\n} from '../ports/secondary/dto/get-all-users.dto-port';\nimport {\n  GET_ONE_USER_DTO_PORT,\n  GetOneUserDtoPort,\n} from '../ports/secondary/dto/get-one-user.dto-port';\nimport {\n  PATCH_USER_CONTEXT_PORT,\n  PatchUserContextPort,\n} from '../ports/secondary/context/patch-user.context-port';\nimport {\n  SELECT_USER_CONTEXT_PORT,\n  SelectUserContextPort,\n} from '../ports/secondary/context/select-user.context-port';\nimport {\n  GET_ALL_PHOTOS_DTO_PORT,\n  GetAllPhotosDtoPort,\n} from '../ports/secondary/dto/get-all-photos.dto-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport { UserDTO } from '../ports/secondary/dto/user.dto';\nimport { PhotoQuery } from '../ports/primary/query/photo.query';\nimport { PhotoDTO } from '../ports/secondary/dto/photo.dto';\nimport { avatarMapper } from '../mappers/avatar.mapper';\n\n@Injectable()\nexport class UserAlbumsState\n  implements\n    GetAllUsersQueryPort,\n    GetUserDetailsQueryPort,\n    InitDetailsCommandPort,\n    GetPhotosForSpecificUserQueryPort,\n    GetAllPhotosQueryPort\n{\n  constructor(\n    @Inject(GET_ALL_USERS_DTO_PORT)\n    private _getAllUsersDtoPort: GetAllUsersDtoPort,\n    @Inject(GET_ONE_USER_DTO_PORT)\n    private _getOneUserDtoPort: GetOneUserDtoPort,\n    @Inject(PATCH_USER_CONTEXT_PORT)\n    private _patchUserContextPort: PatchUserContextPort,\n    @Inject(SELECT_USER_CONTEXT_PORT)\n    private _selectUserContextPort: SelectUserContextPort,\n    @Inject(GET_ALL_PHOTOS_DTO_PORT)\n    private _getAllPhotosDtoPort: GetAllPhotosDtoPort\n  ) {}\n\n  getAllUsers(): Observable<UserQuery[]> {\n    return this._getAllUsersDtoPort\n      .getAllUsers()\n      .pipe(\n        map((allUsers: UserDTO[]) =>\n          allUsers.map((user) => this.mapToUserQuery(user))\n        )\n      );\n  }\n\n  initDetails(id: number): Observable<void> {\n    return this._getOneUserDtoPort\n      .getOneUser(id)\n      .pipe(\n        switchMap((user: UserDTO) => this._patchUserContextPort.patch(user))\n      );\n  }\n\n  getUserDetails(): Observable<UserQuery> {\n    return this._selectUserContextPort.select$.pipe(\n      map((user: UserDTO) => this.mapToUserQuery(user))\n    );\n  }\n\n  getPhotosForSpecificUser(userId: string): Observable<PhotoQuery[]> {\n    return this._getAllPhotosDtoPort.getAllPhotos().pipe(\n      map((photos: PhotoDTO[]) =>\n        photos.filter((photo) => photo.albumId === +userId)\n      ),\n      combineLatestWith(this._selectUserContextPort.select$),\n      map(([photos, userContext]: [PhotoDTO[], UserDTO]) =>\n        photos.map(\n          (photo: PhotoDTO) =>\n            new PhotoQuery(\n              userContext.name,\n              photo.title,\n              photo.thumbnailUrl,\n              Math.floor(Math.random() * 100)\n            )\n        )\n      )\n    );\n  }\n\n  getAllPhotos(): Observable<PhotoQuery[]> {\n    return combineLatest([\n      this._getAllPhotosDtoPort.getAllPhotos(),\n      this._getAllUsersDtoPort.getAllUsers(),\n    ]).pipe(\n      map(([photos, users]) => {\n        const usersDictionary: { [userId: number]: string } = {};\n\n        users.map((user) => {\n          usersDictionary[user.id] = `${user.name} ${user.username}`;\n        });\n\n        return photos.map(\n          (photo) =>\n            new PhotoQuery(\n              usersDictionary[photo.albumId] || 'Unknown Author',\n              photo.title,\n              photo.thumbnailUrl,\n              0\n            )\n        );\n      })\n    );\n  }\n\n  private mapToUserQuery(user: UserDTO): UserQuery {\n    return new UserQuery(\n      user.id,\n      this.getAvatar(user.id),\n      user.name,\n      user.username,\n      user.email,\n      this.getAddress(user),\n      user.phone,\n      `https://www.${user.website}`,\n      user.company.name\n    );\n  }\n\n  private getAddress(user: UserDTO): string {\n    return `${user.address.street},${user.address.zipcode},${user.address.city},`;\n  }\n\n  private getAvatar(id: number): string {\n    return avatarMapper[id];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}