{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nconst INIT_STATE = {\n  id: 0,\n  address: {\n    street: '',\n    geo: {\n      lng: '',\n      lat: ''\n    },\n    city: '',\n    suite: '',\n    zipcode: ''\n  },\n  website: '',\n  phone: '',\n  email: '',\n  name: '',\n  username: '',\n  company: {\n    name: '',\n    bs: '',\n    catchPhrase: ''\n  }\n};\nexport class UserStorage {\n  constructor() {\n    this.userSubject = new BehaviorSubject(INIT_STATE);\n    this.select$ = this.userSubject.asObservable();\n  }\n  patch(state) {\n    return this.userSubject.pipe(take(1), map(context => this.userSubject.next({\n      ...context,\n      ...state\n    })));\n  }\n  setState(state) {\n    this.userSubject.next(state);\n    return of(void 0);\n  }\n  static #_ = this.ɵfac = function UserStorage_Factory(t) {\n    return new (t || UserStorage)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserStorage,\n    factory: UserStorage.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAcC,EAAE,QAAQ,MAAM;AACtD,SAASC,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;AAM1C,MAAMC,UAAU,GAAG;EACjBC,EAAE,EAAE,CAAC;EACLC,OAAO,EAAE;IACPC,MAAM,EAAE,EAAE;IACVC,GAAG,EAAE;MAAEC,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAE,CAAE;IACzBC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE;GACV;EACDC,OAAO,EAAE,EAAE;EACXC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,EAAE;EACRC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE;IAAEF,IAAI,EAAE,EAAE;IAAEG,EAAE,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAE;CAC7C;AAGD,OAAM,MAAOC,WAAW;EADxBC;IAOU,gBAAW,GAA6B,IAAIvB,eAAe,CACjEI,UAAU,CACX;IAEQ,YAAO,GAAwB,IAAI,CAACoB,WAAW,CAACC,YAAY,EAAE;;EAEvEC,KAAK,CAACC,KAAuB;IAC3B,OAAO,IAAI,CAACH,WAAW,CAACI,IAAI,CAC1BzB,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAAE2B,OAAgB,IAAK,IAAI,CAACL,WAAW,CAACM,IAAI,CAAC;MAAE,GAAGD,OAAO;MAAE,GAAGF;IAAK,CAAE,CAAC,CAAC,CAC3E;EACH;EAEAI,QAAQ,CAACJ,KAAuB;IAC9B,IAAI,CAACH,WAAW,CAACM,IAAI,CAACH,KAAK,CAAC;IAE5B,OAAO1B,EAAE,CAAC,KAAK,CAAC,CAAC;EACnB;EAAC;qBAvBUqB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAU,SAAXV,WAAW;EAAA","names":["BehaviorSubject","of","map","take","INIT_STATE","id","address","street","geo","lng","lat","city","suite","zipcode","website","phone","email","name","username","company","bs","catchPhrase","UserStorage","constructor","userSubject","asObservable","patch","state","pipe","context","next","setState","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\adapters\\secondary\\storages\\user.storage.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { PatchUserContextPort } from '../../../application/ports/secondary/context/patch-user.context-port';\nimport { SelectUserContextPort } from '../../../application/ports/secondary/context/select-user.context-port';\nimport { SetStateUserContextPort } from '../../../application/ports/secondary/context/set-state-user.context-port';\nimport { UserDTO } from '../../../application/ports/secondary/dto/user.dto';\n\nconst INIT_STATE = {\n  id: 0,\n  address: {\n    street: '',\n    geo: { lng: '', lat: '' },\n    city: '',\n    suite: '',\n    zipcode: '',\n  },\n  website: '',\n  phone: '',\n  email: '',\n  name: '',\n  username: '',\n  company: { name: '', bs: '', catchPhrase: '' },\n};\n\n@Injectable()\nexport class UserStorage\n  implements\n    PatchUserContextPort,\n    SelectUserContextPort,\n    SetStateUserContextPort\n{\n  private userSubject: BehaviorSubject<UserDTO> = new BehaviorSubject<UserDTO>(\n    INIT_STATE\n  );\n\n  readonly select$: Observable<UserDTO> = this.userSubject.asObservable();\n\n  patch(state: Partial<UserDTO>): Observable<void> {\n    return this.userSubject.pipe(\n      take(1),\n      map((context: UserDTO) => this.userSubject.next({ ...context, ...state }))\n    );\n  }\n\n  setState(state: Partial<UserDTO>): Observable<void> {\n    this.userSubject.next(state);\n\n    return of(void 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}