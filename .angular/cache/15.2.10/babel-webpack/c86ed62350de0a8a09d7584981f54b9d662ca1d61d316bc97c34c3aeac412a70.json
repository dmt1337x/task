{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class UserStorage {\n  constructor() {\n    this.userSubject = new BehaviorSubject({\n      id: 0,\n      address: {\n        street: '',\n        geo: {\n          lng: '',\n          lat: ''\n        },\n        city: '',\n        suite: '',\n        zipcode: ''\n      },\n      website: '',\n      phone: '',\n      email: '',\n      name: '',\n      username: '',\n      company: {\n        name: '',\n        bs: '',\n        catchPhrase: ''\n      }\n    });\n    this.select$ = this.userSubject.asObservable();\n  }\n  patch(state) {\n    return this.userSubject.pipe(take(1), map(context => this.userSubject.next({\n      ...context,\n      ...state\n    })));\n  }\n  static #_ = this.ɵfac = function UserStorage_Factory(t) {\n    return new (t || UserStorage)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserStorage,\n    factory: UserStorage.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAmC,MAAM;AACjE,SAASC,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;AAM1C,OAAM,MAAOC,WAAW;EADxBC;IAIU,gBAAW,GAA6B,IAAIJ,eAAe,CAAU;MAC3EK,EAAE,EAAE,CAAC;MACLC,OAAO,EAAE;QAACC,MAAM,EAAC,EAAE;QAACC,GAAG,EAAC;UAACC,GAAG,EAAC,EAAE;UAACC,GAAG,EAAC;QAAE,CAAC;QAACC,IAAI,EAAC,EAAE;QAACC,KAAK,EAAC,EAAE;QAACC,OAAO,EAAC;MAAE,CAAC;MACpEC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE;QAACF,IAAI,EAAC,EAAE;QAACG,EAAE,EAAC,EAAE;QAACC,WAAW,EAAC;MAAE;KACvC,CAAC;IAEO,YAAO,GAAwB,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;;EAEvEC,KAAK,CAACC,KAAuB;IAC3B,OAAO,IAAI,CAACH,WAAW,CAACI,IAAI,CAC1BxB,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAAE0B,OAAgB,IAAK,IAAI,CAACL,WAAW,CAACM,IAAI,CAAC;MAAE,GAAGD,OAAO;MAAE,GAAGF;IAAK,CAAE,CAAC,CAAC,CAC3E;EACH;EAAC;qBArBUtB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA0B,SAAX1B,WAAW;EAAA","names":["BehaviorSubject","map","take","UserStorage","constructor","id","address","street","geo","lng","lat","city","suite","zipcode","website","phone","email","name","username","company","bs","catchPhrase","userSubject","asObservable","patch","state","pipe","context","next","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\adapters\\secondary\\storages\\user.storage.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { PatchUserContextPort } from '../../../application/ports/secondary/context/patch-user.context-port';\nimport { SelectUserContextPort } from '../../../application/ports/secondary/context/select-user.context-port';\nimport { UserDTO } from '../../../application/ports/secondary/dto/user.dto';\n\n@Injectable()\nexport class UserStorage\n  implements PatchUserContextPort, SelectUserContextPort\n{\n  private userSubject: BehaviorSubject<UserDTO> = new BehaviorSubject<UserDTO>({\n    id: 0,\n    address: {street:'',geo:{lng:'',lat:''},city:'',suite:'',zipcode:''},\n    website: '',\n    phone: '',\n    email: '',\n    name: '',\n    username: '',\n    company: {name:'',bs:'',catchPhrase:''},\n  });\n\n  readonly select$: Observable<UserDTO> = this.userSubject.asObservable();\n\n  patch(state: Partial<UserDTO>): Observable<void> {\n    return this.userSubject.pipe(\n      take(1),\n      map((context: UserDTO) => this.userSubject.next({ ...context, ...state }))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}