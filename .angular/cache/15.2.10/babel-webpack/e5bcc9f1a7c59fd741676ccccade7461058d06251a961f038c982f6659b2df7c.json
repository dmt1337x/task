{"ast":null,"code":"import { combineLatest, combineLatestWith } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { GET_ALL_USERS_DTO_PORT } from '../ports/secondary/dto/get-all-users.dto-port';\nimport { GET_ONE_USER_DTO_PORT } from '../ports/secondary/dto/get-one-user.dto-port';\nimport { PATCH_USER_CONTEXT_PORT } from '../ports/secondary/context/patch-user.context-port';\nimport { SELECT_USER_CONTEXT_PORT } from '../ports/secondary/context/select-user.context-port';\nimport { GET_ALL_PHOTOS_DTO_PORT } from '../ports/secondary/dto/get-all-photos.dto-port';\nimport { SET_STATE_USER_CONTEXT_PORT } from '../ports/secondary/context/set-state-user.context-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport { PhotoQuery } from '../ports/primary/query/photo.query';\nimport { avatarMapper } from '../mappers/avatar.mapper';\nimport * as i0 from \"@angular/core\";\nexport class UserAlbumsState {\n  constructor(_getAllUsersDtoPort, _getOneUserDtoPort, _patchUserContextPort, _selectUserContextPort, _getAllPhotosDtoPort, _setStateUserContextPort) {\n    this._getAllUsersDtoPort = _getAllUsersDtoPort;\n    this._getOneUserDtoPort = _getOneUserDtoPort;\n    this._patchUserContextPort = _patchUserContextPort;\n    this._selectUserContextPort = _selectUserContextPort;\n    this._getAllPhotosDtoPort = _getAllPhotosDtoPort;\n    this._setStateUserContextPort = _setStateUserContextPort;\n  }\n  getAllUsers() {\n    return this._getAllUsersDtoPort.getAllUsers().pipe(map(allUsers => allUsers.map(user => this.mapToUserQuery(user))));\n  }\n  initDetails(id) {\n    return this._getOneUserDtoPort.getOneUser(id).pipe(switchMap(user => this._patchUserContextPort.patch(user)));\n  }\n  getUserDetails() {\n    return this._selectUserContextPort.select$.pipe(map(user => this.mapToUserQuery(user)));\n  }\n  getPhotosForSpecificUser(userId) {\n    return this._getAllPhotosDtoPort.getAllPhotos().pipe(map(photos => photos.filter(photo => photo.albumId === +userId)), combineLatestWith(this._selectUserContextPort.select$), map(([photos, userContext]) => photos.map(photo => new PhotoQuery(userContext.name, photo.title, photo.thumbnailUrl, Math.floor(Math.random() * 100)))));\n  }\n  getAllPhotos() {\n    return combineLatest([this._getAllPhotosDtoPort.getAllPhotos(), this._getAllUsersDtoPort.getAllUsers()]).pipe(map(([photos, users]) => {\n      const mapper = {};\n      users.map(user => {\n        mapper[user.id] = `${user.name} ${user.username}`;\n      });\n      return photos.map(photo => new PhotoQuery(mapper[photo.albumId], photo.title, photo.thumbnailUrl, 0));\n    }));\n  }\n  updateSpecificProperty(command) {\n    return this._patchUserContextPort.patch({\n      [command.propertyName]: command.value\n    });\n  }\n  mapToUserQuery(user) {\n    return new UserQuery(user.id, this.getAvatar(user.id), user.name, user.username, user.email, user.phone, user.website);\n  }\n  getAvatar(id) {\n    return avatarMapper[id];\n  }\n  static #_ = this.ɵfac = function UserAlbumsState_Factory(t) {\n    return new (t || UserAlbumsState)(i0.ɵɵinject(GET_ALL_USERS_DTO_PORT), i0.ɵɵinject(GET_ONE_USER_DTO_PORT), i0.ɵɵinject(PATCH_USER_CONTEXT_PORT), i0.ɵɵinject(SELECT_USER_CONTEXT_PORT), i0.ɵɵinject(GET_ALL_PHOTOS_DTO_PORT), i0.ɵɵinject(SET_STATE_USER_CONTEXT_PORT));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserAlbumsState,\n    factory: UserAlbumsState.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,aAAa,EAAEC,iBAAiB,QAAQ,MAAM;AACnE,SAAiBC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;AAOvD,SAASC,sBAAsB,QAA4B,+CAA+C;AAC1G,SAASC,qBAAqB,QAA2B,8CAA8C;AACvG,SAASC,uBAAuB,QAA8B,oDAAoD;AAClH,SAASC,wBAAwB,QAA+B,qDAAqD;AACrH,SAASC,uBAAuB,QAA6B,gDAAgD;AAC7G,SAASC,2BAA2B,QAAiC,wDAAwD;AAC7H,SAASC,SAAS,QAAQ,mCAAmC;AAE7D,SAASC,UAAU,QAAQ,oCAAoC;AAG/D,SAASC,YAAY,QAAQ,0BAA0B;;AAGvD,OAAM,MAAOC,eAAe;EAQ1BC,YAEUC,mBAAuC,EAEvCC,kBAAqC,EAErCC,qBAA2C,EAE3CC,sBAA6C,EAE7CC,oBAAyC,EAA+CC,wBAAiD;IARzI,wBAAmB,GAAnBL,mBAAmB;IAEnB,uBAAkB,GAAlBC,kBAAkB;IAElB,0BAAqB,GAArBC,qBAAqB;IAErB,2BAAsB,GAAtBC,sBAAsB;IAEtB,yBAAoB,GAApBC,oBAAoB;IAAoE,6BAAwB,GAAxBC,wBAAwB;EACtH;EAEJC,WAAW;IACT,OAAO,IAAI,CAACN,mBAAmB,CAC5BM,WAAW,EAAE,CACbC,IAAI,CACHpB,GAAG,CAAEqB,QAAmB,IACtBA,QAAQ,CAACrB,GAAG,CAAEsB,IAAI,IAAK,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC,CAAC,CAClD,CACF;EACL;EAEAE,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACX,kBAAkB,CAC3BY,UAAU,CAACD,EAAE,CAAC,CACdL,IAAI,CACHnB,SAAS,CAAEqB,IAAa,IAAK,IAAI,CAACP,qBAAqB,CAACY,KAAK,CAACL,IAAI,CAAC,CAAC,CACrE;EACL;EAEAM,cAAc;IACZ,OAAO,IAAI,CAACZ,sBAAsB,CAACa,OAAO,CAACT,IAAI,CAC7CpB,GAAG,CAAEsB,IAAa,IAAK,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC,CAAC,CAClD;EACH;EAEAQ,wBAAwB,CAACC,MAAc;IACrC,OAAO,IAAI,CAACd,oBAAoB,CAACe,YAAY,EAAE,CAACZ,IAAI,CAClDpB,GAAG,CAAEiC,MAAkB,IACrBA,MAAM,CAACC,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,OAAO,KAAK,CAACL,MAAM,CAAC,CACpD,EACDhC,iBAAiB,CAAC,IAAI,CAACiB,sBAAsB,CAACa,OAAO,CAAC,EACtD7B,GAAG,CAAC,CAAC,CAACiC,MAAM,EAAEI,WAAW,CAAwB,KAC/CJ,MAAM,CAACjC,GAAG,CACPmC,KAAe,IACd,IAAI1B,UAAU,CACZ4B,WAAW,CAACC,IAAI,EAChBH,KAAK,CAACI,KAAK,EACXJ,KAAK,CAACK,YAAY,EAClBC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,CAChC,CACJ,CACF,CACF;EACH;EAEAX,YAAY;IACV,OAAOlC,aAAa,CAAC,CACnB,IAAI,CAACmB,oBAAoB,CAACe,YAAY,EAAE,EACxC,IAAI,CAACnB,mBAAmB,CAACM,WAAW,EAAE,CACvC,CAAC,CAACC,IAAI,CACLpB,GAAG,CAAC,CAAC,CAACiC,MAAM,EAAEW,KAAK,CAAC,KAAI;MACtB,MAAMC,MAAM,GAAiC,EAAE;MAE/CD,KAAK,CAAC5C,GAAG,CAAEsB,IAAI,IAAI;QACjBuB,MAAM,CAACvB,IAAI,CAACG,EAAE,CAAC,GAAG,GAAGH,IAAI,CAACgB,IAAI,IAAIhB,IAAI,CAACwB,QAAQ,EAAE;MACnD,CAAC,CAAC;MAEF,OAAOb,MAAM,CAACjC,GAAG,CACdmC,KAAK,IACJ,IAAI1B,UAAU,CACZoC,MAAM,CAACV,KAAK,CAACC,OAAO,CAAC,EACrBD,KAAK,CAACI,KAAK,EACXJ,KAAK,CAACK,YAAY,EAClB,CAAC,CACF,CACJ;IACH,CAAC,CAAC,CACH;EACH;EAEAO,sBAAsB,CAACC,OAAgC;IACrD,OAAO,IAAI,CAACjC,qBAAqB,CAACY,KAAK,CAAC;MACtC,CAACqB,OAAO,CAACC,YAAY,GAAGD,OAAO,CAACE;KACjC,CAAC;EACJ;EAEQ3B,cAAc,CAACD,IAAa;IAClC,OAAO,IAAId,SAAS,CAClBc,IAAI,CAACG,EAAE,EACP,IAAI,CAAC0B,SAAS,CAAC7B,IAAI,CAACG,EAAE,CAAC,EACvBH,IAAI,CAACgB,IAAI,EACThB,IAAI,CAACwB,QAAQ,EACbxB,IAAI,CAAC8B,KAAK,EACV9B,IAAI,CAAC+B,KAAK,EACV/B,IAAI,CAACgC,OAAO,CACb;EACH;EAEQH,SAAS,CAAC1B,EAAU;IAC1B,OAAOf,YAAY,CAACe,EAAE,CAAC;EACzB;EAAC;qBA9GUd,eAAe,cAShBT,sBAAsB,eAEtBC,qBAAqB,eAErBC,uBAAuB,eAEvBC,wBAAwB,eAExBC,uBAAuB,eAC4BC,2BAA2B;EAAA;EAAA;WAlB7EI,eAAe;IAAA4C,SAAf5C,eAAe;EAAA","names":["combineLatest","combineLatestWith","map","switchMap","GET_ALL_USERS_DTO_PORT","GET_ONE_USER_DTO_PORT","PATCH_USER_CONTEXT_PORT","SELECT_USER_CONTEXT_PORT","GET_ALL_PHOTOS_DTO_PORT","SET_STATE_USER_CONTEXT_PORT","UserQuery","PhotoQuery","avatarMapper","UserAlbumsState","constructor","_getAllUsersDtoPort","_getOneUserDtoPort","_patchUserContextPort","_selectUserContextPort","_getAllPhotosDtoPort","_setStateUserContextPort","getAllUsers","pipe","allUsers","user","mapToUserQuery","initDetails","id","getOneUser","patch","getUserDetails","select$","getPhotosForSpecificUser","userId","getAllPhotos","photos","filter","photo","albumId","userContext","name","title","thumbnailUrl","Math","floor","random","users","mapper","username","updateSpecificProperty","command","propertyName","value","getAvatar","email","phone","website","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\application\\state\\user-albums.state.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { Observable, combineLatest, combineLatestWith } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { GetAllUsersQueryPort } from '../ports/primary/query/get-all-users.query-port';\nimport { GetUserDetailsQueryPort } from '../ports/primary/query/get-user-details.query-port';\nimport { InitDetailsCommandPort } from '../ports/primary/command/init-details.command-port';\nimport { GetPhotosForSpecificUserQueryPort } from '../ports/primary/query/get-photos-for-specific-user.query-port';\nimport { GetAllPhotosQueryPort } from '../ports/primary/query/get-all-photos.query-port';\nimport { UpdateSpecificPropertyCommandPort } from '../ports/primary/command/update-specific-property.command-port';\nimport { GET_ALL_USERS_DTO_PORT, GetAllUsersDtoPort } from '../ports/secondary/dto/get-all-users.dto-port';\nimport { GET_ONE_USER_DTO_PORT, GetOneUserDtoPort } from '../ports/secondary/dto/get-one-user.dto-port';\nimport { PATCH_USER_CONTEXT_PORT, PatchUserContextPort } from '../ports/secondary/context/patch-user.context-port';\nimport { SELECT_USER_CONTEXT_PORT, SelectUserContextPort } from '../ports/secondary/context/select-user.context-port';\nimport { GET_ALL_PHOTOS_DTO_PORT, GetAllPhotosDtoPort } from '../ports/secondary/dto/get-all-photos.dto-port';\nimport { SET_STATE_USER_CONTEXT_PORT, SetStateUserContextPort } from '../ports/secondary/context/set-state-user.context-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport { UserDTO } from '../ports/secondary/dto/user.dto';\nimport { PhotoQuery } from '../ports/primary/query/photo.query';\nimport { PhotoDTO } from '../ports/secondary/dto/photo.dto';\nimport { SpecificPropertyCommand } from '../ports/primary/command/specific-property.command';\nimport { avatarMapper } from '../mappers/avatar.mapper';\n\n@Injectable()\nexport class UserAlbumsState\n  implements\n  GetAllUsersQueryPort,\n  GetUserDetailsQueryPort,\n  InitDetailsCommandPort,\n  GetPhotosForSpecificUserQueryPort,\n  GetAllPhotosQueryPort,\n  UpdateSpecificPropertyCommandPort {\n  constructor(\n    @Inject(GET_ALL_USERS_DTO_PORT)\n    private _getAllUsersDtoPort: GetAllUsersDtoPort,\n    @Inject(GET_ONE_USER_DTO_PORT)\n    private _getOneUserDtoPort: GetOneUserDtoPort,\n    @Inject(PATCH_USER_CONTEXT_PORT)\n    private _patchUserContextPort: PatchUserContextPort,\n    @Inject(SELECT_USER_CONTEXT_PORT)\n    private _selectUserContextPort: SelectUserContextPort,\n    @Inject(GET_ALL_PHOTOS_DTO_PORT)\n    private _getAllPhotosDtoPort: GetAllPhotosDtoPort, @Inject(SET_STATE_USER_CONTEXT_PORT) private _setStateUserContextPort: SetStateUserContextPort\n  ) { }\n\n  getAllUsers(): Observable<UserQuery[]> {\n    return this._getAllUsersDtoPort\n      .getAllUsers()\n      .pipe(\n        map((allUsers: UserDTO[]) =>\n          allUsers.map((user) => this.mapToUserQuery(user))\n        )\n      );\n  }\n\n  initDetails(id: number): Observable<void> {\n    return this._getOneUserDtoPort\n      .getOneUser(id)\n      .pipe(\n        switchMap((user: UserDTO) => this._patchUserContextPort.patch(user))\n      );\n  }\n\n  getUserDetails(): Observable<UserQuery> {\n    return this._selectUserContextPort.select$.pipe(\n      map((user: UserDTO) => this.mapToUserQuery(user))\n    );\n  }\n\n  getPhotosForSpecificUser(userId: string): Observable<PhotoQuery[]> {\n    return this._getAllPhotosDtoPort.getAllPhotos().pipe(\n      map((photos: PhotoDTO[]) =>\n        photos.filter((photo) => photo.albumId === +userId)\n      ),\n      combineLatestWith(this._selectUserContextPort.select$),\n      map(([photos, userContext]: [PhotoDTO[], UserDTO]) =>\n        photos.map(\n          (photo: PhotoDTO) =>\n            new PhotoQuery(\n              userContext.name,\n              photo.title,\n              photo.thumbnailUrl,\n              Math.floor(Math.random() * 100)\n            )\n        )\n      )\n    );\n  }\n\n  getAllPhotos(): Observable<PhotoQuery[]> {\n    return combineLatest([\n      this._getAllPhotosDtoPort.getAllPhotos(),\n      this._getAllUsersDtoPort.getAllUsers(),\n    ]).pipe(\n      map(([photos, users]) => {\n        const mapper: { [userId: number]: string } = {};\n\n        users.map((user) => {\n          mapper[user.id] = `${user.name} ${user.username}`;\n        });\n\n        return photos.map(\n          (photo) =>\n            new PhotoQuery(\n              mapper[photo.albumId],\n              photo.title,\n              photo.thumbnailUrl,\n              0\n            )\n        );\n      })\n    );\n  }\n\n  updateSpecificProperty(command: SpecificPropertyCommand): Observable<void> {\n    return this._patchUserContextPort.patch({\n      [command.propertyName]: command.value,\n    });\n  }\n\n  private mapToUserQuery(user: UserDTO): UserQuery {\n    return new UserQuery(\n      user.id,\n      this.getAvatar(user.id),\n      user.name,\n      user.username,\n      user.email,\n      user.phone,\n      user.website\n    );\n  }\n\n  private getAvatar(id: number): string {\n    return avatarMapper[id];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}