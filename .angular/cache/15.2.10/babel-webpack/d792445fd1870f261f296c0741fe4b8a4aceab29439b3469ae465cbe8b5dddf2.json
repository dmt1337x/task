{"ast":null,"code":"import { map, switchMap } from 'rxjs/operators';\nimport { GET_ALL_USERS_DTO_PORT } from '../ports/secondary/dto/get-all-users.dto-port';\nimport { GET_ONE_USER_DTO_PORT } from '../ports/secondary/dto/get-one-user.dto-port';\nimport { PATCH_USER_CONTEXT_PORT } from '../ports/secondary/context/patch-user.context-port';\nimport { SELECT_USER_CONTEXT_PORT } from '../ports/secondary/context/select-user.context-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport * as i0 from \"@angular/core\";\nexport class UserAlbumsState {\n  constructor(_getAllUsersDtoPort, _getOneUserDtoPort, _patchUserContextPort, _selectUserContextPort) {\n    this._getAllUsersDtoPort = _getAllUsersDtoPort;\n    this._getOneUserDtoPort = _getOneUserDtoPort;\n    this._patchUserContextPort = _patchUserContextPort;\n    this._selectUserContextPort = _selectUserContextPort;\n  }\n  getAllUsers() {\n    return this._getAllUsersDtoPort.getAllUsers().pipe(map(allUsers => allUsers.map(user => this.mapToUserQuery(user))));\n  }\n  getUserDetails() {\n    return this._selectUserContextPort.select$.pipe(map(user => this.mapToUserQuery(user)));\n  }\n  initDetails(id) {\n    return this._getOneUserDtoPort.getOneUser(id).pipe(switchMap(user => this._patchUserContextPort.patch(user)));\n  }\n  mapToUserQuery(user) {\n    return new UserQuery(user.id, this.getAvatar(), user.name, user.username, user.email, this.getAddress(user), user.phone, user.website, user.company.name);\n  }\n  getAddress(user) {\n    return `${user.address.street},${user.address.zipcode},${user.address.city},`;\n  }\n  getAvatar() {\n    return 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/512px-Angular_full_color_logo.svg.png';\n  }\n  getPhotosForSpecificUser() {\n    this._getOnePhotoDtoP;\n  }\n  static #_ = this.ɵfac = function UserAlbumsState_Factory(t) {\n    return new (t || UserAlbumsState)(i0.ɵɵinject(GET_ALL_USERS_DTO_PORT), i0.ɵɵinject(GET_ONE_USER_DTO_PORT), i0.ɵɵinject(PATCH_USER_CONTEXT_PORT), i0.ɵɵinject(SELECT_USER_CONTEXT_PORT));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserAlbumsState,\n    factory: UserAlbumsState.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;AAK/C,SACEC,sBAAsB,QAEjB,+CAA+C;AACtD,SACEC,qBAAqB,QAEhB,8CAA8C;AACrD,SACEC,uBAAuB,QAElB,oDAAoD;AAC3D,SACEC,wBAAwB,QAEnB,qDAAqD;AAK5D,SAASC,SAAS,QAAQ,mCAAmC;;AAK7D,OAAM,MAAOC,eAAe;EAO1BC,YAEUC,mBAAuC,EAEvCC,kBAAqC,EAErCC,qBAA2C,EAE3CC,sBAA6C;IAN7C,wBAAmB,GAAnBH,mBAAmB;IAEnB,uBAAkB,GAAlBC,kBAAkB;IAElB,0BAAqB,GAArBC,qBAAqB;IAErB,2BAAsB,GAAtBC,sBAAsB;EAC7B;EAEHC,WAAW;IACT,OAAO,IAAI,CAACJ,mBAAmB,CAC5BI,WAAW,EAAE,CACbC,IAAI,CACHd,GAAG,CAAEe,QAAmB,IACtBA,QAAQ,CAACf,GAAG,CAAEgB,IAAI,IAAK,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC,CAAC,CAClD,CACF;EACL;EAEAE,cAAc;IACZ,OAAO,IAAI,CAACN,sBAAsB,CAACO,OAAO,CAACL,IAAI,CAC7Cd,GAAG,CAAEgB,IAAa,IAAK,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC,CAAC,CAClD;EACH;EAEAI,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACX,kBAAkB,CAC3BY,UAAU,CAACD,EAAE,CAAC,CACdP,IAAI,CACHb,SAAS,CAAEe,IAAa,IAAK,IAAI,CAACL,qBAAqB,CAACY,KAAK,CAACP,IAAI,CAAC,CAAC,CACrE;EACL;EAEQC,cAAc,CAACD,IAAa;IAClC,OAAO,IAAIV,SAAS,CAClBU,IAAI,CAACK,EAAE,EACP,IAAI,CAACG,SAAS,EAAE,EAChBR,IAAI,CAACS,IAAI,EACTT,IAAI,CAACU,QAAQ,EACbV,IAAI,CAACW,KAAK,EACV,IAAI,CAACC,UAAU,CAACZ,IAAI,CAAC,EACrBA,IAAI,CAACa,KAAK,EACVb,IAAI,CAACc,OAAO,EACZd,IAAI,CAACe,OAAO,CAACN,IAAI,CAClB;EACH;EAEQG,UAAU,CAACZ,IAAa;IAC9B,OAAO,GAAGA,IAAI,CAACgB,OAAO,CAACC,MAAM,IAAIjB,IAAI,CAACgB,OAAO,CAACE,OAAO,IAAIlB,IAAI,CAACgB,OAAO,CAACG,IAAI,GAAG;EAC/E;EAEQX,SAAS;IACf,OAAO,6HAA6H;EACtI;EAEAY,wBAAwB;IACtB,IAAI,CAACC,gBAAgB;EACvB;EAAC;qBAlEU9B,eAAe,cAQhBL,sBAAsB,eAEtBC,qBAAqB,eAErBC,uBAAuB,eAEvBC,wBAAwB;EAAA;EAAA;WAdvBE,eAAe;IAAA+B,SAAf/B,eAAe;EAAA","names":["map","switchMap","GET_ALL_USERS_DTO_PORT","GET_ONE_USER_DTO_PORT","PATCH_USER_CONTEXT_PORT","SELECT_USER_CONTEXT_PORT","UserQuery","UserAlbumsState","constructor","_getAllUsersDtoPort","_getOneUserDtoPort","_patchUserContextPort","_selectUserContextPort","getAllUsers","pipe","allUsers","user","mapToUserQuery","getUserDetails","select$","initDetails","id","getOneUser","patch","getAvatar","name","username","email","getAddress","phone","website","company","address","street","zipcode","city","getPhotosForSpecificUser","_getOnePhotoDtoP","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\application\\state\\user-albums.state.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { GetAllUsersQueryPort } from '../ports/primary/query/get-all-users.query-port';\nimport { GetUserDetailsQueryPort } from '../ports/primary/query/get-user-details.query-port';\nimport { InitDetailsCommandPort } from '../ports/primary/command/init-details.command-port';\nimport { GetPhotosForSpecificUserQueryPort } from '../ports/primary/query/get-photos-for-specific-user.query-port';\nimport {\n  GET_ALL_USERS_DTO_PORT,\n  GetAllUsersDtoPort,\n} from '../ports/secondary/dto/get-all-users.dto-port';\nimport {\n  GET_ONE_USER_DTO_PORT,\n  GetOneUserDtoPort,\n} from '../ports/secondary/dto/get-one-user.dto-port';\nimport {\n  PATCH_USER_CONTEXT_PORT,\n  PatchUserContextPort,\n} from '../ports/secondary/context/patch-user.context-port';\nimport {\n  SELECT_USER_CONTEXT_PORT,\n  SelectUserContextPort,\n} from '../ports/secondary/context/select-user.context-port';\nimport {\n  GET_ONE_PHOTO_DTO_PORT,\n  GetOnePhotoDtoPort,\n} from '../ports/secondary/dto/get-one-photo.dto-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport { UserDTO } from '../ports/secondary/dto/user.dto';\nimport { PhotoQuery } from '../ports/primary/query/photo.query';\n\n@Injectable()\nexport class UserAlbumsState\n  implements\n    GetAllUsersQueryPort,\n    GetUserDetailsQueryPort,\n    InitDetailsCommandPort,\n    GetPhotosForSpecificUserQueryPort\n{\n  constructor(\n    @Inject(GET_ALL_USERS_DTO_PORT)\n    private _getAllUsersDtoPort: GetAllUsersDtoPort,\n    @Inject(GET_ONE_USER_DTO_PORT)\n    private _getOneUserDtoPort: GetOneUserDtoPort,\n    @Inject(PATCH_USER_CONTEXT_PORT)\n    private _patchUserContextPort: PatchUserContextPort,\n    @Inject(SELECT_USER_CONTEXT_PORT)\n    private _selectUserContextPort: SelectUserContextPort\n  ) {}\n\n  getAllUsers(): Observable<UserQuery[]> {\n    return this._getAllUsersDtoPort\n      .getAllUsers()\n      .pipe(\n        map((allUsers: UserDTO[]) =>\n          allUsers.map((user) => this.mapToUserQuery(user))\n        )\n      );\n  }\n\n  getUserDetails(): Observable<UserQuery> {\n    return this._selectUserContextPort.select$.pipe(\n      map((user: UserDTO) => this.mapToUserQuery(user))\n    );\n  }\n\n  initDetails(id: number): Observable<void> {\n    return this._getOneUserDtoPort\n      .getOneUser(id)\n      .pipe(\n        switchMap((user: UserDTO) => this._patchUserContextPort.patch(user))\n      );\n  }\n\n  private mapToUserQuery(user: UserDTO) {\n    return new UserQuery(\n      user.id,\n      this.getAvatar(),\n      user.name,\n      user.username,\n      user.email,\n      this.getAddress(user),\n      user.phone,\n      user.website,\n      user.company.name\n    );\n  }\n\n  private getAddress(user: UserDTO) {\n    return `${user.address.street},${user.address.zipcode},${user.address.city},`;\n  }\n\n  private getAvatar() {\n    return 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/512px-Angular_full_color_logo.svg.png';\n  }\n\n  getPhotosForSpecificUser(): Observable<PhotoQuery[]> {\n    this._getOnePhotoDtoP;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}