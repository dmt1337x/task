{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { GET_ALL_USERS_DTO_PORT } from '../ports/secondary/dto/get-all-users.dto-port';\nimport { GET_ONE_USER_DTO_PORT } from '../ports/secondary/dto/get-one-user.dto-port';\nimport { PATCH_USER_CONTEXT_PORT } from '../ports/secondary/context/patch-user.context-port';\nimport { SELECT_USER_CONTEXT_PORT } from '../ports/secondary/context/select-user.context-port';\nimport { UserQuery } from '../ports/primary/query/user.query';\nimport * as i0 from \"@angular/core\";\nexport class UserAlbumsState {\n  constructor(_getAllUsersDtoPort, _getOneUserDtoPort, _patchUserContextPort, _selectUserContextPort) {\n    this._getAllUsersDtoPort = _getAllUsersDtoPort;\n    this._getOneUserDtoPort = _getOneUserDtoPort;\n    this._patchUserContextPort = _patchUserContextPort;\n    this._selectUserContextPort = _selectUserContextPort;\n  }\n  getAllUsers() {\n    return this._getAllUsersDtoPort.getAllUsers().pipe(map(allUsers => allUsers.map(user => new UserQuery(user.id, this.getAvatar(), user.name, user.username, user.email, this.getAddress(user), user.phone, user.website, user.company.name))));\n  }\n  mapToUserQuery(user) {\n    return new UserQuery(user.id, this.getAvatar(), user.name, user.username, user.email, this.getAddress(user), user.phone, user.website, user.company.name);\n  }\n  getAddress(user) {\n    return `${user.address.street},${user.address.zipcode},${user.address.city},`;\n  }\n  getAvatar() {\n    return 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/512px-Angular_full_color_logo.svg.png';\n  }\n  getUserDetails(id) {\n    return this._getOneUserDtoPort.getOneUser(id).pipe(map(user => new UserQuery(user.id, this.getAvatar(), user.name, user.username, user.email, this.getAddress(user), user.phone, user.website, user.company.name)));\n  }\n  static #_ = this.ɵfac = function UserAlbumsState_Factory(t) {\n    return new (t || UserAlbumsState)(i0.ɵɵinject(GET_ALL_USERS_DTO_PORT), i0.ɵɵinject(GET_ONE_USER_DTO_PORT), i0.ɵɵinject(PATCH_USER_CONTEXT_PORT), i0.ɵɵinject(SELECT_USER_CONTEXT_PORT));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserAlbumsState,\n    factory: UserAlbumsState.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAQA,GAAG,QAAO,gBAAgB;AAGlC,SAAQC,sBAAsB,QAA4B,+CAA+C;AACzG,SAAQC,qBAAqB,QAA2B,8CAA8C;AACtG,SAAQC,uBAAuB,QAA8B,oDAAoD;AACjH,SAAQC,wBAAwB,QAA+B,qDAAqD;AACpH,SAAQC,SAAS,QAAO,mCAAmC;;AAI3D,OAAM,MAAOC,eAAe;EAG1BC,YAEUC,mBAAuC,EAEvCC,kBAAqC,EAErCC,qBAA2C,EAE3CC,sBAA6C;IAN7C,wBAAmB,GAAnBH,mBAAmB;IAEnB,uBAAkB,GAAlBC,kBAAkB;IAElB,0BAAqB,GAArBC,qBAAqB;IAErB,2BAAsB,GAAtBC,sBAAsB;EAC7B;EAEHC,WAAW;IACT,OAAO,IAAI,CAACJ,mBAAmB,CAC5BI,WAAW,EAAE,CACbC,IAAI,CACHb,GAAG,CAAEc,QAAQ,IACXA,QAAQ,CAACd,GAAG,CACTe,IAAI,IACH,IAAIV,SAAS,CACXU,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,SAAS,EAAE,EAChBF,IAAI,CAACG,IAAI,EACTH,IAAI,CAACI,QAAQ,EACbJ,IAAI,CAACK,KAAK,EACV,IAAI,CAACC,UAAU,CAACN,IAAI,CAAC,EACrBA,IAAI,CAACO,KAAK,EACVP,IAAI,CAACQ,OAAO,EACZR,IAAI,CAACS,OAAO,CAACN,IAAI,CAClB,CACJ,CACF,CACF;EACL;EAEAO,cAAc,CAACV,IAAY;IACzB,OAAqB,IAAIV,SAAS,CAChCU,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,SAAS,EAAE,EAChBF,IAAI,CAACG,IAAI,EACTH,IAAI,CAACI,QAAQ,EACbJ,IAAI,CAACK,KAAK,EACV,IAAI,CAACC,UAAU,CAACN,IAAI,CAAC,EACrBA,IAAI,CAACO,KAAK,EACVP,IAAI,CAACQ,OAAO,EACZR,IAAI,CAACS,OAAO,CAACN,IAAI,CAClB;EACH;EAEQG,UAAU,CAACN,IAAa;IAC9B,OAAO,GAAGA,IAAI,CAACW,OAAO,CAACC,MAAM,IAAIZ,IAAI,CAACW,OAAO,CAACE,OAAO,IAAIb,IAAI,CAACW,OAAO,CAACG,IAAI,GAAG;EAC/E;EAEQZ,SAAS;IACf,OAAO,6HAA6H;EACtI;EAEAa,cAAc,CAACd,EAAU;IACvB,OAAO,IAAI,CAACP,kBAAkB,CAC3BsB,UAAU,CAACf,EAAE,CAAC,CACdH,IAAI,CACHb,GAAG,CACAe,IAAa,IACZ,IAAIV,SAAS,CACXU,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,SAAS,EAAE,EAChBF,IAAI,CAACG,IAAI,EACTH,IAAI,CAACI,QAAQ,EACbJ,IAAI,CAACK,KAAK,EACV,IAAI,CAACC,UAAU,CAACN,IAAI,CAAC,EACrBA,IAAI,CAACO,KAAK,EACVP,IAAI,CAACQ,OAAO,EACZR,IAAI,CAACS,OAAO,CAACN,IAAI,CAClB,CACJ,CACF;EACL;EAAC;qBA9EUZ,eAAe,cAIhBL,sBAAsB,eAEtBC,qBAAqB,eAErBC,uBAAuB,eAEvBC,wBAAwB;EAAA;EAAA;WAVvBE,eAAe;IAAA0B,SAAf1B,eAAe;EAAA","names":["map","GET_ALL_USERS_DTO_PORT","GET_ONE_USER_DTO_PORT","PATCH_USER_CONTEXT_PORT","SELECT_USER_CONTEXT_PORT","UserQuery","UserAlbumsState","constructor","_getAllUsersDtoPort","_getOneUserDtoPort","_patchUserContextPort","_selectUserContextPort","getAllUsers","pipe","allUsers","user","id","getAvatar","name","username","email","getAddress","phone","website","company","mapToUserQuery","address","street","zipcode","city","getUserDetails","getOneUser","factory"],"sourceRoot":"","sources":["E:\\WORK\\task\\projects\\user-albums\\src\\lib\\application\\state\\user-albums.state.ts"],"sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {GetAllUsersQueryPort} from '../ports/primary/query/get-all-users.query-port';\nimport {GetUserDetailsQueryPort} from '../ports/primary/query/get-user-details.query-port';\nimport {GET_ALL_USERS_DTO_PORT, GetAllUsersDtoPort,} from '../ports/secondary/dto/get-all-users.dto-port';\nimport {GET_ONE_USER_DTO_PORT, GetOneUserDtoPort,} from '../ports/secondary/dto/get-one-user.dto-port';\nimport {PATCH_USER_CONTEXT_PORT, PatchUserContextPort,} from '../ports/secondary/context/patch-user.context-port';\nimport {SELECT_USER_CONTEXT_PORT, SelectUserContextPort,} from '../ports/secondary/context/select-user.context-port';\nimport {UserQuery} from '../ports/primary/query/user.query';\nimport {UserDTO} from '../ports/secondary/dto/user.dto';\n\n@Injectable()\nexport class UserAlbumsState\n  implements GetAllUsersQueryPort, GetUserDetailsQueryPort\n{\n  constructor(\n    @Inject(GET_ALL_USERS_DTO_PORT)\n    private _getAllUsersDtoPort: GetAllUsersDtoPort,\n    @Inject(GET_ONE_USER_DTO_PORT)\n    private _getOneUserDtoPort: GetOneUserDtoPort,\n    @Inject(PATCH_USER_CONTEXT_PORT)\n    private _patchUserContextPort: PatchUserContextPort,\n    @Inject(SELECT_USER_CONTEXT_PORT)\n    private _selectUserContextPort: SelectUserContextPort\n  ) {}\n\n  getAllUsers(): Observable<UserQuery[]> {\n    return this._getAllUsersDtoPort\n      .getAllUsers()\n      .pipe(\n        map((allUsers) =>\n          allUsers.map(\n            (user) =>\n              new UserQuery(\n                user.id,\n                this.getAvatar(),\n                user.name,\n                user.username,\n                user.email,\n                this.getAddress(user),\n                user.phone,\n                user.website,\n                user.company.name\n              )\n          )\n        )\n      );\n  }\n  \n  mapToUserQuery(user:UserDTO){\n    return               new UserQuery(\n      user.id,\n      this.getAvatar(),\n      user.name,\n      user.username,\n      user.email,\n      this.getAddress(user),\n      user.phone,\n      user.website,\n      user.company.name\n    )\n  }\n\n  private getAddress(user: UserDTO) {\n    return `${user.address.street},${user.address.zipcode},${user.address.city},`;\n  }\n\n  private getAvatar() {\n    return 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/512px-Angular_full_color_logo.svg.png';\n  }\n\n  getUserDetails(id: number): Observable<UserQuery> {\n    return this._getOneUserDtoPort\n      .getOneUser(id)\n      .pipe(\n        map(\n          (user: UserDTO) =>\n            new UserQuery(\n              user.id,\n              this.getAvatar(),\n              user.name,\n              user.username,\n              user.email,\n              this.getAddress(user),\n              user.phone,\n              user.website,\n              user.company.name\n            )\n        )\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}